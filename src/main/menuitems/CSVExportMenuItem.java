package main.menuitems;

import main.Car;
import main.DatabaseConnection;
import main.User;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Class that creates the menu item to export the data to a CSV file.
 *
 * @author Elena Roncolino
 */
public class CSVExportMenuItem extends JMenuItem {
    private File chosenFile;
    private String chosenFilePath;

    private static final Logger logger = Logger.getLogger(CSVExportMenuItem.class.getName());

    /**
     * Builds the CSV export menu item.
     *
     * @return JMenuItem The CSV export menu item.
     */
    public JMenuItem csvExportMenuItem() {

        ImageIcon csvImage = new ImageIcon(new ImageIcon("images/export.png").getImage().getScaledInstance(20, 20, Image.SCALE_DEFAULT));
        JMenuItem csvMenu = new JMenuItem("Export to CSV file", csvImage);
        csvMenu.addActionListener(new ActionListener() {
            /**
             * Overrides the default one and builds the panel to choose a file.
             * @param e The event generated by clicking on the csv export menu item.
             */
            @Override
            public void actionPerformed(ActionEvent e) {
                JPanel labelPanel = new JPanel();
                labelPanel.setLayout(new BoxLayout(labelPanel, BoxLayout.X_AXIS));
                JLabel pathLabel = new JLabel("Path to CSV file:");
                labelPanel.add(pathLabel);
                labelPanel.add(Box.createHorizontalGlue());

                JPanel pathPanel = new JPanel();
                pathPanel.setLayout(new BoxLayout(pathPanel, BoxLayout.X_AXIS));
                JTextField pathField = new JTextField();
                pathField.setPreferredSize(new Dimension(300, 20));
                JButton chooseFileButton = new JButton("Choose file");
                chooseFileButton.addActionListener(new ActionListener() {
                    /**
                     * Opens the jFileChooser where the user can choose a file to export to.
                     * @param e The event generated by clicking on the choose file button.
                     */
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        JFileChooser fileChooser = new JFileChooser();
                        FileNameExtensionFilter csvFilter = new FileNameExtensionFilter("CSV File", "csv");
                        fileChooser.setFileFilter(csvFilter);
                        fileChooser.setAcceptAllFileFilterUsed(false);
                        int returnValue = fileChooser.showSaveDialog(new JPanel());

                        if (returnValue == JFileChooser.APPROVE_OPTION) {
                            chosenFile = fileChooser.getSelectedFile();
                            chosenFilePath = fileChooser.getSelectedFile().getAbsolutePath();

                            if (chosenFile != null) {
                                pathField.setText(chosenFilePath);
                            }
                        }
                    }
                });

                pathPanel.add(pathField);
                pathPanel.add(Box.createRigidArea(new Dimension(20, 0)));
                pathPanel.add(chooseFileButton);

                JPanel container = new JPanel();
                container.setLayout(new BoxLayout(container, BoxLayout.Y_AXIS));
                container.add(labelPanel);
                container.add(Box.createRigidArea(new Dimension(0, 10)));
                container.add(pathPanel);
                container.add(Box.createRigidArea(new Dimension(0, 20)));

                int result = JOptionPane.showConfirmDialog(null, container, "Choose export file", JOptionPane.YES_NO_OPTION);

                if (result == JOptionPane.YES_OPTION) {
                    if (chosenFile == null)
                        JOptionPane.showMessageDialog(null, "No file selected!", "Error", JOptionPane.ERROR_MESSAGE);

                    else {

                        logger.log(Level.INFO, "Exporting CSV file");
                        export(DatabaseConnection.getInstance().getCarsByUserId(User.getUserId()), chosenFilePath);
                        JOptionPane.showMessageDialog(null, "CSV file generated successfully!", "File generated", JOptionPane.INFORMATION_MESSAGE);
                        logger.log(Level.FINEST, "CSV file exported successfully");
                    }
                }
            }
        });

        return csvMenu;
    }

    /**
     * Exports the car list to the desired file.
     *
     * @param carList  The list of cars to be exported.
     * @param filePath The file path where the cars have to be exported to.
     */
    private void export(List<Car> carList, String filePath) {
        FileWriter fileWriter = null;
        try {
            fileWriter = new FileWriter(filePath);

            for (int i = 0; i < carList.size(); i++) {
                fileWriter.append(carList.get(i).getCarName());
                fileWriter.append(",");
                fileWriter.append(carList.get(i).getCarBrand());
                fileWriter.append(",");
                fileWriter.append(String.valueOf(carList.get(i).getCubicCapacity()));
                fileWriter.append(",");
                fileWriter.append(String.valueOf(carList.get(i).getPs()));
                fileWriter.append(",");
                fileWriter.append(String.valueOf(carList.get(i).getKw()));
                fileWriter.append(",");
                fileWriter.append(String.valueOf(carList.get(i).getCylinders()));
                fileWriter.append(",");
                fileWriter.append(carList.get(i).getFuelType());
                fileWriter.append("\n");
            }

        } catch (IOException e) {
            logger.log(Level.SEVERE, "Problem writing to file", e);
        } finally {
            try {
                if (fileWriter != null) {
                    fileWriter.flush();
                    fileWriter.close();
                }
            } catch (IOException e) {
                logger.log(Level.SEVERE, "Problem flushing/closing file writer", e);
            }
        }


    }
}
