package main.menuitems;

import main.Car;
import main.DatabaseConnection;
import main.User;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Class that creates the menu item to import a CSV file.
 *
 * @author Elena Roncolino
 */
public class CSVImportMenuItem extends JMenuItem {
    private static final Logger logger = Logger.getLogger(CSVImportMenuItem.class.getName());

    /**
     * Method that builds the CSV import menu item.
     *
     * @return JMenuItem The CSV import menu item.
     */
    public JMenuItem buildCSVImportMenuItem() {
        ImageIcon csvImage = new ImageIcon(new ImageIcon("images/import.png").getImage().getScaledInstance(20, 20, Image.SCALE_DEFAULT));
        JMenuItem csvMenu = new JMenuItem("Import from CSV file", csvImage);
        csvMenu.addActionListener(new ActionListener() {
            /**
             * Overrides the default one and creates a jFileChooser.
             * @param e The event generated by clicking on the csv import menu item.
             */
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser fileChooser = new JFileChooser();
                FileNameExtensionFilter csvFilter = new FileNameExtensionFilter("CSV File", "csv");
                fileChooser.setFileFilter(csvFilter);
                fileChooser.setAcceptAllFileFilterUsed(false);
                int returnValue = fileChooser.showOpenDialog(new JPanel());

                if (returnValue == JFileChooser.APPROVE_OPTION) {
                    logger.log(Level.INFO, "Importing CSV file");
                    File chosenFile = fileChooser.getSelectedFile();
                    readCarsFromCsvFile(chosenFile);
                }
            }
        });
        return csvMenu;
    }

    /**
     * Parses the CSV file and calls the SQLiteHandler method to add the obtained car list to the database.
     *
     * @param file The CSV file to be parsed.
     */
    private void readCarsFromCsvFile(File file) {
        List<Car> carsToImportList = new ArrayList<>();
        BufferedReader br;
        String line;
        String split = ",";
        Car car;
        int cubicCapacity = 0, ps = 0, kw = 0, cylinders = 0;
        boolean canInsert = true;

        try {
            br = new BufferedReader(new FileReader(file));

            while ((line = br.readLine()) != null && !line.equals("")) {

                String[] carData = line.split(split);

                try {
                    cubicCapacity = Integer.parseInt(carData[2]);
                    ps = Integer.parseInt(carData[3]);
                    kw = Integer.parseInt(carData[4]);
                    cylinders = Integer.parseInt(carData[5]);

                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Problem importing records from CSV file!", "Error", JOptionPane.ERROR_MESSAGE);
                    canInsert = false;
                    logger.log(Level.SEVERE, "Importing error: malformed fields");
                } catch (ArrayIndexOutOfBoundsException e) {
                    JOptionPane.showMessageDialog(null, "CSV file wrong formatted!\nIt could not be imported.",
                            "Error", JOptionPane.ERROR_MESSAGE);
                    logger.log(Level.SEVERE, "Importing error: missing fields");
                }

                car = new Car(carData[0], carData[1], cubicCapacity, ps, kw, cylinders, carData[6], User.getUserId());

                carsToImportList.add(car);

            }
        } catch (FileNotFoundException e) {
            logger.log(Level.SEVERE, "Problem finding file");
        } catch (IOException e) {
            logger.log(Level.SEVERE, "Problem reading file");
        }

        if (canInsert) {
            try {
                DatabaseConnection.getInstance().insertCarList(carsToImportList);
                logger.log(Level.INFO, "Import successful");
            } catch (SQLException e) {
                logger.log(Level.SEVERE, "Problem with the database");
            }
        }
    }

}
